// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XpressShip.Infrastructure.Persistence;

#nullable disable

namespace XpressShip.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("XpressShip.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000002"),
                            CityId = new Guid("c1a0b1b0-0001-0000-0000-000000000001"),
                            ClientId = new Guid("e1a0b1b0-0001-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Latitude = 40.375588499999999,
                            Longitude = 49.832800900000002,
                            PostalCode = "AZ1000",
                            Street = "Ashiq Molla"
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.ApiClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("SecretKey")
                        .IsUnique();

                    b.ToTable("ApiClients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000001"),
                            ApiKey = "DtCjCFdg8F5UwN4qh+jq4x5F0F3NZH7kwlStqeJT1xQ=",
                            CompanyName = "My Company",
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            IsActive = true,
                            SecretKey = "DDdTq31f3XFZB0Q37bylv9OWXdh4JJMD1D0Q2JdXxnjHcv1U8D0anqmagSVizoKyIWUH53/MftB4BTFD/qvwaw=="
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1a0b1b0-0001-0000-0000-000000000001"),
                            CountryId = new Guid("c1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Baku"
                        },
                        new
                        {
                            Id = new Guid("c1a0b1b0-0001-0000-0000-000000000002"),
                            CountryId = new Guid("c1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Sumqayit"
                        },
                        new
                        {
                            Id = new Guid("c1a0b1b0-0001-0000-0000-000000000003"),
                            CountryId = new Guid("c1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Ganja"
                        },
                        new
                        {
                            Id = new Guid("a1a0b1b0-0001-0000-0000-000000000001"),
                            CountryId = new Guid("a1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("a1a0b1b0-0001-0000-0000-000000000002"),
                            CountryId = new Guid("a1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Saint Petersburg"
                        },
                        new
                        {
                            Id = new Guid("a1a0b1b0-0001-0000-0000-000000000003"),
                            CountryId = new Guid("a1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Kazan"
                        },
                        new
                        {
                            Id = new Guid("b1a0b1b0-0001-0000-0000-000000000001"),
                            CountryId = new Guid("b1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = new Guid("b1a0b1b0-0001-0000-0000-000000000002"),
                            CountryId = new Guid("b1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Batumi"
                        },
                        new
                        {
                            Id = new Guid("d1a0b1b0-0001-0000-0000-000000000001"),
                            CountryId = new Guid("d1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Tabriz"
                        },
                        new
                        {
                            Id = new Guid("d1a0b1b0-0001-0000-0000-000000000002"),
                            CountryId = new Guid("d1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Tehran"
                        },
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000001"),
                            CountryId = new Guid("e1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000002"),
                            CountryId = new Guid("e1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000003"),
                            CountryId = new Guid("e1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Izmir"
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCodePattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxPercentage")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries", t =>
                        {
                            t.HasCheckConstraint("CK_Country_TaxPercentage", "[TaxPercentage] > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1a0b1b0-0001-0000-0000-000000000000"),
                            Code = "AZE",
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Azerbaijan",
                            PostalCodePattern = "AZ\\s\\d{4}$",
                            TaxPercentage = 20m
                        },
                        new
                        {
                            Id = new Guid("a1a0b1b0-0001-0000-0000-000000000000"),
                            Code = "RUS",
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Russia",
                            PostalCodePattern = "^\\d{6}$",
                            TaxPercentage = 18m
                        },
                        new
                        {
                            Id = new Guid("b1a0b1b0-0001-0000-0000-000000000000"),
                            Code = "GEO",
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Georgia",
                            PostalCodePattern = "^\\d{4}$",
                            TaxPercentage = 15m
                        },
                        new
                        {
                            Id = new Guid("d1a0b1b0-0001-0000-0000-000000000000"),
                            Code = "IRN",
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Iran",
                            PostalCodePattern = "^\\d{10}$",
                            TaxPercentage = 25m
                        },
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000000"),
                            Code = "TUR",
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Name = "Turkey",
                            PostalCodePattern = "^\\d{5}$",
                            TaxPercentage = 18m
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DestinationAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OriginAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShipmentRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApiClientId");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("OriginAddressId");

                    b.HasIndex("ShipmentRateId");

                    b.HasIndex("TrackingNumber")
                        .IsUnique();

                    b.ToTable("Shipments", t =>
                        {
                            t.HasCheckConstraint("CK_Shipment_EstimatedDate", "[EstimatedDate] > getdate()");
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.ShipmentRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("BaseRateForKg")
                        .HasColumnType("float");

                    b.Property<double>("BaseRateForKm")
                        .HasColumnType("float");

                    b.Property<double>("BaseRateForVolume")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExpressDeliveryTimeMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("ExpressRateMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("MaxDistance")
                        .HasColumnType("float");

                    b.Property<double>("MaxVolume")
                        .HasColumnType("float");

                    b.Property<double>("MaxWeight")
                        .HasColumnType("float");

                    b.Property<double>("MinDistance")
                        .HasColumnType("float");

                    b.Property<double>("MinVolume")
                        .HasColumnType("float");

                    b.Property<double>("MinWeight")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("OvernightDeliveryTimeMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("OvernightRateMultiplier")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ShippingRates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1a0b1b0-0001-0000-0000-000000000001"),
                            BaseRate = 10.00m,
                            BaseRateForKg = 1.5,
                            BaseRateForKm = 0.050000000000000003,
                            BaseRateForVolume = 2.0,
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Description = "Rate for small packages within local regions.",
                            ExpressDeliveryTimeMultiplier = 0.80000000000000004,
                            ExpressRateMultiplier = 1.2,
                            MaxDistance = 100.0,
                            MaxVolume = 0.5,
                            MaxWeight = 5.0,
                            MinDistance = 0.0,
                            MinVolume = 0.0,
                            MinWeight = 0.0,
                            Name = "Small Package - Local",
                            OvernightDeliveryTimeMultiplier = 0.5,
                            OvernightRateMultiplier = 1.5
                        },
                        new
                        {
                            Id = new Guid("f1a0b1b0-0001-0000-0000-000000000002"),
                            BaseRate = 25.00m,
                            BaseRateForKg = 2.0,
                            BaseRateForKm = 0.10000000000000001,
                            BaseRateForVolume = 3.0,
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Description = "Rate for medium-sized packages within regional areas.",
                            ExpressDeliveryTimeMultiplier = 0.69999999999999996,
                            ExpressRateMultiplier = 1.3,
                            MaxDistance = 500.0,
                            MaxVolume = 2.0,
                            MaxWeight = 20.0,
                            MinDistance = 101.0,
                            MinVolume = 0.5,
                            MinWeight = 5.0099999999999998,
                            Name = "Medium Package - Regional",
                            OvernightDeliveryTimeMultiplier = 0.40000000000000002,
                            OvernightRateMultiplier = 1.7
                        },
                        new
                        {
                            Id = new Guid("f1a0b1b0-0001-0000-0000-000000000003"),
                            BaseRate = 50.00m,
                            BaseRateForKg = 3.5,
                            BaseRateForKm = 0.20000000000000001,
                            BaseRateForVolume = 4.5,
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Description = "Rate for large packages for national deliveries.",
                            ExpressDeliveryTimeMultiplier = 0.59999999999999998,
                            ExpressRateMultiplier = 1.5,
                            MaxDistance = 1000.0,
                            MaxVolume = 5.0,
                            MaxWeight = 50.0,
                            MinDistance = 501.0,
                            MinVolume = 2.0099999999999998,
                            MinWeight = 20.010000000000002,
                            Name = "Large Package - National",
                            OvernightDeliveryTimeMultiplier = 0.29999999999999999,
                            OvernightRateMultiplier = 2.0
                        },
                        new
                        {
                            Id = new Guid("f1a0b1b0-0001-0000-0000-000000000004"),
                            BaseRate = 75.00m,
                            BaseRateForKg = 5.0,
                            BaseRateForKm = 0.29999999999999999,
                            BaseRateForVolume = 6.0,
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Description = "Rate for heavy packages for international deliveries.",
                            ExpressDeliveryTimeMultiplier = 0.5,
                            ExpressRateMultiplier = 1.7,
                            MaxDistance = 5000.0,
                            MaxVolume = 10.0,
                            MaxWeight = 100.0,
                            MinDistance = 1001.0,
                            MinVolume = 5.0099999999999998,
                            MinWeight = 50.009999999999998,
                            Name = "Heavy Package - International",
                            OvernightDeliveryTimeMultiplier = 0.20000000000000001,
                            OvernightRateMultiplier = 2.5
                        },
                        new
                        {
                            Id = new Guid("f1a0b1b0-0001-0000-0000-000000000005"),
                            BaseRate = 100.00m,
                            BaseRateForKg = 7.0,
                            BaseRateForKm = 0.5,
                            BaseRateForVolume = 8.0,
                            CreatedAt = new DateTime(2025, 1, 19, 10, 58, 23, 908, DateTimeKind.Utc).AddTicks(1152),
                            Description = "Rate for oversized freight shipments globally.",
                            ExpressDeliveryTimeMultiplier = 0.40000000000000002,
                            ExpressRateMultiplier = 2.0,
                            MaxDistance = 10000.0,
                            MaxVolume = 50.0,
                            MaxWeight = 500.0,
                            MinDistance = 5001.0,
                            MinVolume = 10.01,
                            MinWeight = 100.01000000000001,
                            Name = "Oversized Freight - Global",
                            OvernightDeliveryTimeMultiplier = 0.10000000000000001,
                            OvernightRateMultiplier = 3.0
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Address", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XpressShip.Domain.Entities.ApiClient", "Client")
                        .WithOne("Address")
                        .HasForeignKey("XpressShip.Domain.Entities.Address", "ClientId");

                    b.Navigation("City");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.City", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.ApiClient", "ApiClient")
                        .WithMany("Shipments")
                        .HasForeignKey("ApiClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("XpressShip.Domain.Entities.Address", "DestinationAddress")
                        .WithMany("ShipmentsDestination")
                        .HasForeignKey("DestinationAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XpressShip.Domain.Entities.Address", "OriginAddress")
                        .WithMany("ShipmentsOrigin")
                        .HasForeignKey("OriginAddressId");

                    b.HasOne("XpressShip.Domain.Entities.ShipmentRate", "Rate")
                        .WithMany("Shipments")
                        .HasForeignKey("ShipmentRateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApiClient");

                    b.Navigation("DestinationAddress");

                    b.Navigation("OriginAddress");

                    b.Navigation("Rate");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Address", b =>
                {
                    b.Navigation("ShipmentsDestination");

                    b.Navigation("ShipmentsOrigin");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.ApiClient", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.ShipmentRate", b =>
                {
                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
