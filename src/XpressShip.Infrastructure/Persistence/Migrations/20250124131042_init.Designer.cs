// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XpressShip.Infrastructure.Persistence;

#nullable disable

namespace XpressShip.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250124131042_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "76e77f40-c5d1-4cd5-bc00-f5425716e4ff",
                            RoleId = "a28012e7-5cdb-4651-b3ae-8709b2ce319d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000002"),
                            CityId = new Guid("c1a0b1b0-0001-0000-0000-000000000001"),
                            ClientId = new Guid("e1a0b1b0-0001-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Latitude = 40.375588499999999,
                            Longitude = 49.832800900000002,
                            PostalCode = "AZ1000",
                            Street = "Ashiq Molla"
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.ApiClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeActivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SecretKey")
                        .IsUnique();

                    b.ToTable("ApiClients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000001"),
                            ApiKey = "wAqqzTX3qNYlvoi8WT7exnXiTW2QgMfPi/RbAGbBSF8=",
                            CompanyName = "My Company",
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Email = "nurlancreus007@gmail.com",
                            IsActive = true,
                            SecretKey = "npqaCZ9X1yq+M34eY5U5WTmFGvNTv1t2h+nSZdSWMJU="
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1a0b1b0-0001-0000-0000-000000000001"),
                            CountryId = new Guid("c1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Baku"
                        },
                        new
                        {
                            Id = new Guid("c1a0b1b0-0001-0000-0000-000000000002"),
                            CountryId = new Guid("c1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Sumqayit"
                        },
                        new
                        {
                            Id = new Guid("c1a0b1b0-0001-0000-0000-000000000003"),
                            CountryId = new Guid("c1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Ganja"
                        },
                        new
                        {
                            Id = new Guid("a1a0b1b0-0001-0000-0000-000000000001"),
                            CountryId = new Guid("a1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("a1a0b1b0-0001-0000-0000-000000000002"),
                            CountryId = new Guid("a1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Saint Petersburg"
                        },
                        new
                        {
                            Id = new Guid("a1a0b1b0-0001-0000-0000-000000000003"),
                            CountryId = new Guid("a1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Kazan"
                        },
                        new
                        {
                            Id = new Guid("b1a0b1b0-0001-0000-0000-000000000001"),
                            CountryId = new Guid("b1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = new Guid("b1a0b1b0-0001-0000-0000-000000000002"),
                            CountryId = new Guid("b1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Batumi"
                        },
                        new
                        {
                            Id = new Guid("d1a0b1b0-0001-0000-0000-000000000001"),
                            CountryId = new Guid("d1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Tabriz"
                        },
                        new
                        {
                            Id = new Guid("d1a0b1b0-0001-0000-0000-000000000002"),
                            CountryId = new Guid("d1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Tehran"
                        },
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000001"),
                            CountryId = new Guid("e1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000002"),
                            CountryId = new Guid("e1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000003"),
                            CountryId = new Guid("e1a0b1b0-0001-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Izmir"
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCodePattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxPercentage")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries", t =>
                        {
                            t.HasCheckConstraint("CK_Country_TaxPercentage", "[TaxPercentage] > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1a0b1b0-0001-0000-0000-000000000000"),
                            Code = "AZE",
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Azerbaijan",
                            PostalCodePattern = "AZ\\s\\d{4}$",
                            TaxPercentage = 20m
                        },
                        new
                        {
                            Id = new Guid("a1a0b1b0-0001-0000-0000-000000000000"),
                            Code = "RUS",
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Russia",
                            PostalCodePattern = "^\\d{6}$",
                            TaxPercentage = 18m
                        },
                        new
                        {
                            Id = new Guid("b1a0b1b0-0001-0000-0000-000000000000"),
                            Code = "GEO",
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Georgia",
                            PostalCodePattern = "^\\d{4}$",
                            TaxPercentage = 15m
                        },
                        new
                        {
                            Id = new Guid("d1a0b1b0-0001-0000-0000-000000000000"),
                            Code = "IRN",
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Iran",
                            PostalCodePattern = "^\\d{10}$",
                            TaxPercentage = 25m
                        },
                        new
                        {
                            Id = new Guid("e1a0b1b0-0001-0000-0000-000000000000"),
                            Code = "TUR",
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Name = "Turkey",
                            PostalCodePattern = "^\\d{5}$",
                            TaxPercentage = 18m
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a28012e7-5cdb-4651-b3ae-8709b2ce319d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Super Admin Role",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId")
                        .IsUnique();

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApiClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DestinationAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OriginAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ShipmentRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApiClientId");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("OriginAddressId");

                    b.HasIndex("SenderId");

                    b.HasIndex("ShipmentRateId");

                    b.HasIndex("TrackingNumber")
                        .IsUnique();

                    b.ToTable("Shipments", t =>
                        {
                            t.HasCheckConstraint("CK_Shipment_EstimatedDate", "[EstimatedDate] > getdate()");
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.ShipmentRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("BaseRateForKg")
                        .HasColumnType("float");

                    b.Property<double>("BaseRateForKm")
                        .HasColumnType("float");

                    b.Property<double>("BaseRateForVolume")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExpressDeliveryTimeMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("ExpressRateMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("MaxDistance")
                        .HasColumnType("float");

                    b.Property<double>("MaxVolume")
                        .HasColumnType("float");

                    b.Property<double>("MaxWeight")
                        .HasColumnType("float");

                    b.Property<double>("MinDistance")
                        .HasColumnType("float");

                    b.Property<double>("MinVolume")
                        .HasColumnType("float");

                    b.Property<double>("MinWeight")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("OvernightDeliveryTimeMultiplier")
                        .HasColumnType("float");

                    b.Property<double>("OvernightRateMultiplier")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ShippingRates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1a0b1b0-0001-0000-0000-000000000001"),
                            BaseRate = 10.00m,
                            BaseRateForKg = 1.5,
                            BaseRateForKm = 0.050000000000000003,
                            BaseRateForVolume = 2.0,
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Description = "Rate for small packages within local regions.",
                            ExpressDeliveryTimeMultiplier = 0.80000000000000004,
                            ExpressRateMultiplier = 1.2,
                            MaxDistance = 100.0,
                            MaxVolume = 0.5,
                            MaxWeight = 5.0,
                            MinDistance = 0.0,
                            MinVolume = 0.0,
                            MinWeight = 0.0,
                            Name = "Small Package - Local",
                            OvernightDeliveryTimeMultiplier = 0.5,
                            OvernightRateMultiplier = 1.5
                        },
                        new
                        {
                            Id = new Guid("f1a0b1b0-0001-0000-0000-000000000002"),
                            BaseRate = 25.00m,
                            BaseRateForKg = 2.0,
                            BaseRateForKm = 0.10000000000000001,
                            BaseRateForVolume = 3.0,
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Description = "Rate for medium-sized packages within regional areas.",
                            ExpressDeliveryTimeMultiplier = 0.69999999999999996,
                            ExpressRateMultiplier = 1.3,
                            MaxDistance = 500.0,
                            MaxVolume = 2.0,
                            MaxWeight = 20.0,
                            MinDistance = 101.0,
                            MinVolume = 0.5,
                            MinWeight = 5.0099999999999998,
                            Name = "Medium Package - Regional",
                            OvernightDeliveryTimeMultiplier = 0.40000000000000002,
                            OvernightRateMultiplier = 1.7
                        },
                        new
                        {
                            Id = new Guid("f1a0b1b0-0001-0000-0000-000000000003"),
                            BaseRate = 50.00m,
                            BaseRateForKg = 3.5,
                            BaseRateForKm = 0.20000000000000001,
                            BaseRateForVolume = 4.5,
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Description = "Rate for large packages for national deliveries.",
                            ExpressDeliveryTimeMultiplier = 0.59999999999999998,
                            ExpressRateMultiplier = 1.5,
                            MaxDistance = 1000.0,
                            MaxVolume = 5.0,
                            MaxWeight = 50.0,
                            MinDistance = 501.0,
                            MinVolume = 2.0099999999999998,
                            MinWeight = 20.010000000000002,
                            Name = "Large Package - National",
                            OvernightDeliveryTimeMultiplier = 0.29999999999999999,
                            OvernightRateMultiplier = 2.0
                        },
                        new
                        {
                            Id = new Guid("f1a0b1b0-0001-0000-0000-000000000004"),
                            BaseRate = 75.00m,
                            BaseRateForKg = 5.0,
                            BaseRateForKm = 0.29999999999999999,
                            BaseRateForVolume = 6.0,
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Description = "Rate for heavy packages for international deliveries.",
                            ExpressDeliveryTimeMultiplier = 0.5,
                            ExpressRateMultiplier = 1.7,
                            MaxDistance = 5000.0,
                            MaxVolume = 10.0,
                            MaxWeight = 100.0,
                            MinDistance = 1001.0,
                            MinVolume = 5.0099999999999998,
                            MinWeight = 50.009999999999998,
                            Name = "Heavy Package - International",
                            OvernightDeliveryTimeMultiplier = 0.20000000000000001,
                            OvernightRateMultiplier = 2.5
                        },
                        new
                        {
                            Id = new Guid("f1a0b1b0-0001-0000-0000-000000000005"),
                            BaseRate = 100.00m,
                            BaseRateForKg = 7.0,
                            BaseRateForKm = 0.5,
                            BaseRateForVolume = 8.0,
                            CreatedAt = new DateTime(2025, 1, 24, 13, 10, 41, 129, DateTimeKind.Utc).AddTicks(7917),
                            Description = "Rate for oversized freight shipments globally.",
                            ExpressDeliveryTimeMultiplier = 0.40000000000000002,
                            ExpressRateMultiplier = 2.0,
                            MaxDistance = 10000.0,
                            MaxVolume = 50.0,
                            MaxWeight = 500.0,
                            MinDistance = 5001.0,
                            MinVolume = 10.01,
                            MinWeight = 100.01000000000001,
                            Name = "Oversized Freight - Global",
                            OvernightDeliveryTimeMultiplier = 0.10000000000000001,
                            OvernightRateMultiplier = 3.0
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Users.Admin", b =>
                {
                    b.HasBaseType("XpressShip.Domain.Entities.Users.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = "76e77f40-c5d1-4cd5-bc00-f5425716e4ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f9f258c-76c1-4dec-a141-69bb4b3b68ce",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nurlancreus@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nurlan",
                            LastName = "Shukurov",
                            LockoutEnabled = false,
                            NormalizedEmail = "NURLANCREUS@EXAMPLE.COM",
                            NormalizedUserName = "NURLANCREUS",
                            PasswordHash = "AQAAAAIAAYagAAAAEB6csMyNikt9N9Kl0Xnb2ypN3SvqKq8KCSKa8jV5nNdeoUrYkVbw4IIdhhroM0QHZQ==",
                            PhoneNumber = "+994513456776",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f52031a-242c-4c65-891c-27830fbd368d",
                            TwoFactorEnabled = false,
                            UserName = "nurlancreus"
                        });
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Users.Sender", b =>
                {
                    b.HasBaseType("XpressShip.Domain.Entities.Users.ApplicationUser");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeActivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasIndex("AddressId");

                    b.HasDiscriminator().HasValue("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XpressShip.Domain.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Address", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XpressShip.Domain.Entities.ApiClient", "Client")
                        .WithOne("Address")
                        .HasForeignKey("XpressShip.Domain.Entities.Address", "ClientId");

                    b.Navigation("City");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.City", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Payment", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.Shipment", "Shipment")
                        .WithOne("Payment")
                        .HasForeignKey("XpressShip.Domain.Entities.Payment", "ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.ApiClient", "ApiClient")
                        .WithMany("Shipments")
                        .HasForeignKey("ApiClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("XpressShip.Domain.Entities.Address", "DestinationAddress")
                        .WithMany("ShipmentsDestination")
                        .HasForeignKey("DestinationAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XpressShip.Domain.Entities.Address", "OriginAddress")
                        .WithMany("ShipmentsOrigin")
                        .HasForeignKey("OriginAddressId");

                    b.HasOne("XpressShip.Domain.Entities.Users.Sender", "Sender")
                        .WithMany("Shipments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("XpressShip.Domain.Entities.ShipmentRate", "Rate")
                        .WithMany("Shipments")
                        .HasForeignKey("ShipmentRateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApiClient");

                    b.Navigation("DestinationAddress");

                    b.Navigation("OriginAddress");

                    b.Navigation("Rate");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Users.Sender", b =>
                {
                    b.HasOne("XpressShip.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Address", b =>
                {
                    b.Navigation("ShipmentsDestination");

                    b.Navigation("ShipmentsOrigin");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.ApiClient", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Shipment", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.ShipmentRate", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("XpressShip.Domain.Entities.Users.Sender", b =>
                {
                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
